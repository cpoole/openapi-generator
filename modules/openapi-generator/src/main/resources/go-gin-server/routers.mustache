{{>partial_header}}
package {{packageName}}

import (
    "net/http"
	"github.com/gin-gonic/gin"
    l "go.bird.co/bird-common/common-logging-golang"
)

type EngineHandlers interface {
    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    {{pathAsPascalCase}}{{httpMethod}}(ctx *gin.Context, {{#goQueryParams}}{{.}},{{/goQueryParams}}) ({{returnType}}, error)
    {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

    {{#routeMiddlewares}}
        {{.}}(ctx *gin.Context)
    {{/routeMiddlewares}}
}

func RegisterRoutes(engine *gin.Engine, handlers EngineHandlers) error {
    engine.Use(l.GinLogrusMiddleware(l.Logger), gin.Recovery())

    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    {{pathAsPascalCase}}{{httpMethod}} := func(ctx *gin.Context) {
        {{#queryParams}}
            {{paramName}} := ctx.Param("{{paramName}}")
        {{/queryParams}}
        result, err := handlers.{{pathAsPascalCase}}{{httpMethod}}(ctx, {{#queryParams}}{{paramName}}{{/queryParams}})
        if err != nil {
            ctx.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": err.Error})
        }

        ctx.JSON(http.StatusOK, result)
    }

    engine.{{httpMethodCAPS}}("{{path}}", {{#routeMiddlewares}}handlers.{{.}},{{/routeMiddlewares}} handlers.{{pathAsPascalCase}}{{httpMethod}})
    {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

    return nil
}

